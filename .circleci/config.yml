version: 2.1

orbs:
  docker: circleci/docker@2.6.0
  maven: circleci/maven@1.4.1
  snyk: snyk/snyk@2.1.0

executors: # Executors define the environment in which the steps of a job will be run, allowing you to reuse a single executor definition across multiple jobs.
  openjdk-with-postgres:
    docker: # Environment.
      - image: cimg/openjdk:21.0.2
        environment:
          PGHOST: 127.0.0.1

      - image: cimg/postgres:16.2
        environment:
          POSTGRES_PASSWORD: password # Must not be empty or undefined. It is trust authentication locally (inside the same container) so the password is not actually used.
          POSTGRES_DB: the_review_room # This optional environment variable defines the default database created when the image is first started (default is postgres).

jobs:
  publish: # Also known as the build-and-push.
    executor: docker/docker # This executor is provided by the circleci/docker orb.

    steps:
      - checkout
      - setup_remote_docker
      - docker/check
      - docker/build: # Build the image.
          image: nhkhai/the-review-room
          tag: latest # Consider setting this dynamically based on the tag using env vars or CircleCI parameters.
      - docker/push: # Pushes the image to the specified account in the environment variables.
          image: nhkhai/the-review-room
          tag: latest # Consider setting this dynamically based on the tag using env vars or CircleCI parameters.

  scan:
    docker:
      - image: cimg/base:current # Define the execution environment in which the steps of a job will run.

    environment: # The environment allows us to create an environment for the job and allows us to create custom environment variables.
      IMAGE_NAME: nhkhai/the-review-room

    steps:
      - checkout
      - setup_remote_docker
      - docker/check
      - run: docker build -t $IMAGE_NAME . # $IMAGE_NAME gets the value from the environment we created above.
      - snyk/scan: # This triggers the Snyk scan using the preconfigured SNYK_TOKEN environmental variable.
          docker-image-name: $IMAGE_NAME # The image name, if scanning a container image.
          fail-on-issues: false # This specifies if builds should be failed or continued based on issues found by Snyk. If false, the failure is hidden and marked as a pass.
          severity-threshold: high # Only report vulnerabilities of provided level or higher (low/medium/high/critical). If param is not present, the default value is low.

  deploy:
    docker:
      - image: cimg/base:current

    steps:
      - run:
          name: Render Deploy Hook
          command: |
            curl "$RENDER_DEPLOY_HOOK_URL"

workflows:
  ci_flow: # Workflow name. This is the name of the workflow, feel free to change it to better match your workflow.
    jobs:
      - maven/test: # This will use the circleci/maven orb to do a mvn verify (which includes build and test), then generate the test report.
          executor: openjdk-with-postgres
          filters:
            branches:
              ignore:
                - release

      - publish:
          requires:
            - maven/test

      - scan:
          requires:
            - publish

  cicd_flow:
    jobs:
      - maven/test: # This will use the circleci/maven orb to do a mvn verify (which includes build and test), then generate the test report.
          executor: openjdk-with-postgres
          filters:
            branches:
              only:
                - release

      - publish:
          requires:
            - maven/test

      - scan:
          requires:
            - publish

      - deploy:
          requires:
            - publish
